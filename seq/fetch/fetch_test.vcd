$date
	Thu Mar 10 01:06:46 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module fetch_tb $end
$var wire 64 ! valP [63:0] $end
$var wire 64 " valC [63:0] $end
$var wire 4 # rB [3:0] $end
$var wire 4 $ rA [3:0] $end
$var wire 1 % need_valC $end
$var wire 1 & need_regids $end
$var wire 1 ' instr_valid $end
$var wire 1 ( imem_error $end
$var wire 4 ) ifun [3:0] $end
$var wire 4 * icode [3:0] $end
$var wire 72 + Byte19 [71:0] $end
$var wire 8 , Byte0 [7:0] $end
$var reg 1 - clk $end
$var reg 64 . pc [63:0] $end
$scope module InstMem $end
$var wire 1 - clk $end
$var wire 64 / pc [63:0] $end
$var reg 8 0 Byte0 [7:0] $end
$var reg 72 1 Byte19 [71:0] $end
$var reg 1 ( imem_error $end
$upscope $end
$scope module PC_i $end
$var wire 4 2 icode [3:0] $end
$var wire 64 3 pc [63:0] $end
$var wire 64 4 valP [63:0] $end
$var wire 1 % need_valC $end
$var wire 1 & need_regids $end
$var reg 1 5 halt $end
$upscope $end
$scope module al $end
$var wire 72 6 Byte19 [71:0] $end
$var wire 64 7 valC [63:0] $end
$var wire 4 8 rB [3:0] $end
$var wire 4 9 rA [3:0] $end
$var wire 1 & need_regids $end
$upscope $end
$scope module i_valid $end
$var wire 4 : icode [3:0] $end
$var reg 1 ' instr_valid $end
$upscope $end
$scope module n_valC $end
$var wire 4 ; icode [3:0] $end
$var reg 1 % need_valC $end
$upscope $end
$scope module nreg $end
$var wire 4 < icode [3:0] $end
$var reg 1 & need_regids $end
$upscope $end
$scope module sp $end
$var wire 8 = Byte0 [7:0] $end
$var wire 4 > ifun [3:0] $end
$var wire 4 ? icode [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11 ?
b0 >
b110000 =
b11 <
b11 ;
b11 :
b1111 9
b100 8
b1000000000 7
b100000000011110100 6
05
b1011 4
b1 3
bz 2
b100000000011110100 1
b110000 0
b1 /
b1 .
0-
b110000 ,
b100000000011110100 +
b11 *
b0 )
0(
1'
1&
1%
b1111 $
b100 #
b1000000000 "
b1011 !
$end
#10000
b11 $
b11 9
b0 #
b0 8
b10000000001111010000110000 +
b10000000001111010000110000 1
b10000000001111010000110000 6
b10000000001111010000110000 "
b10000000001111010000110000 7
0&
0%
b1 !
b1 4
b1 *
b1 :
b1 ;
b1 <
b1 ?
b10000 ,
b10000 0
b10000 =
b0 .
b0 /
b0 3
1-
#20000
0-
#30000
b1111 $
b1111 9
b100 #
b100 8
b100000000011110100 +
b100000000011110100 1
b100000000011110100 6
b1000000000 "
b1000000000 7
1%
1&
b1011 !
b1011 4
b11 *
b11 :
b11 ;
b11 <
b11 ?
b110000 ,
b110000 0
b110000 =
b1 .
b1 /
b1 3
1-
#40000
0-
#50000
b10000 "
b10000 7
b111 #
b111 8
b1000011110111 +
b1000011110111 1
b1000011110111 6
b10101 !
b10101 4
b1011 .
b1011 /
b1011 3
1-
#60000
0-
#70000
b1010 "
b1010 7
b1100 #
b1100 8
b101011111100 +
b101011111100 1
b101011111100 6
b11111 !
b11111 4
b10101 .
b10101 /
b10101 3
1-
#80000
0-
#90000
b1000 "
b1000 7
b1000 #
b1000 8
b100011111000 +
b100011111000 1
b100011111000 6
b1111010 !
b1111010 4
b1110000 .
b1110000 /
b1110000 3
1-
#100000
0-
#110000
b1 "
b1 7
b1001 #
b1001 8
b111111001 +
b111111001 1
b111111001 6
b10000100 !
b10000100 4
b1111010 .
b1111010 /
b1111010 3
1-
#120000
0-
#130000
b10010001011100000110011001100010 "
b10010001011100000110011001100010 7
b0 $
b0 9
b0 #
b0 8
b1001000101110000011001100110001000000000 +
b1001000101110000011001100110001000000000 1
b1001000101110000011001100110001000000000 6
0%
b10000110 !
b10000110 4
b110 *
b110 :
b110 ;
b110 <
b110 ?
b11 )
b11 >
b1100011 ,
b1100011 0
b1100011 =
b10000100 .
b10000100 /
b10000100 3
1-
#140000
0-
#150000
b1001000101110000 "
b1001000101110000 7
b110 $
b110 9
b110 #
b110 8
b100100010111000001100110 +
b100100010111000001100110 1
b100100010111000001100110 6
b10001000 !
b10001000 4
b10 )
b10 >
b1100010 ,
b1100010 0
b1100010 =
b10000110 .
b10000110 /
b10000110 3
1-
#160000
0-
#170000
b1001 $
b1001 9
b1 #
b1 8
b11000010000000000000000000000000000000000000000000000000000000010010001 +
b11000010000000000000000000000000000000000000000000000000000000010010001 1
b11000010000000000000000000000000000000000000000000000000000000010010001 6
b10010001 "
b10010001 7
1%
0&
b10010001 !
b10010001 4
b111 *
b111 :
b111 ;
b111 <
b111 ?
b0 )
b0 >
b1110000 ,
b1110000 0
b1110000 =
b10001000 .
b10001000 /
b10001000 3
1-
#180000
0-
#190000
b1000 #
b1000 8
b100100010111010010011000 +
b100100010111010010011000 1
b100100010111010010011000 6
b1001000101110100 "
b1001000101110100 7
1&
0%
b10010011 !
b10010011 4
b110 *
b110 :
b110 ;
b110 <
b110 ?
b1 )
b1 >
b1100001 ,
b1100001 0
b1100001 =
b10010001 .
b10010001 /
b10010001 3
1-
#200000
0-
#210000
b1 #
b1 8
b100100000000000000000000000000000000000000000000000000000000000010010001 +
b100100000000000000000000000000000000000000000000000000000000000010010001 1
b100100000000000000000000000000000000000000000000000000000000000010010001 6
b10010001 "
b10010001 7
1%
0&
b10011100 !
b10011100 4
b111 *
b111 :
b111 ;
b111 <
b111 ?
b100 )
b100 >
b1110100 ,
b1110100 0
b1110100 =
b10010011 .
b10010011 /
b10010011 3
1-
#220000
0-
#230000
bx "
bx 7
bx $
bx 9
bx #
bx 8
bx +
bx 1
bx 6
0%
b10011101 !
b10011101 4
b1001 *
b1001 :
b1001 ;
b1001 <
b1001 ?
b0 )
b0 >
b10010000 ,
b10010000 0
b10010000 =
b10011100 .
b10011100 /
b10011100 3
1-
#240000
0-

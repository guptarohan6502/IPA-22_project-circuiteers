$date
	Tue Feb 22 22:44:37 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ram_test $end
$var wire 1 ! write $end
$var wire 64 " valM [63:0] $end
$var wire 1 # read $end
$var wire 64 $ memdata [63:0] $end
$var wire 64 % memaddr [63:0] $end
$var wire 1 & dmemerror $end
$var reg 4 ' icode [3:0] $end
$var reg 64 ( valA [63:0] $end
$var reg 64 ) valE [63:0] $end
$var reg 64 * valP [63:0] $end
$var integer 32 + k [31:0] $end
$scope module Ma $end
$var wire 4 , icode [3:0] $end
$var wire 64 - valA [63:0] $end
$var wire 64 . valE [63:0] $end
$var reg 64 / memaddr [63:0] $end
$upscope $end
$scope module Md $end
$var wire 4 0 icode [3:0] $end
$var wire 64 1 valA [63:0] $end
$var wire 64 2 valP [63:0] $end
$var reg 64 3 memdata [63:0] $end
$upscope $end
$scope module Mr $end
$var wire 4 4 icode [3:0] $end
$var reg 1 # read $end
$upscope $end
$scope module Mw $end
$var wire 4 5 icode [3:0] $end
$var reg 1 ! write $end
$upscope $end
$scope module ram1 $end
$var wire 64 6 memaddr [63:0] $end
$var wire 64 7 memdata [63:0] $end
$var wire 1 # read $end
$var wire 1 ! write $end
$var reg 1 & dmemerror $end
$var reg 64 8 valM [63:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 8
b10010000101010011010100100100 7
b11111111 6
b100 5
b100 4
b10010000101010011010100100100 3
bx 2
b10010000101010011010100100100 1
b100 0
b11111111 /
b11111111 .
b10010000101010011010100100100 -
b100 ,
b0 +
bx *
b11111111 )
b10010000101010011010100100100 (
b100 '
0&
b11111111 %
b10010000101010011010100100100 $
0#
bx "
1!
$end
#10000
b1111111111111111111111111111111111000000100010010101111010000010 $
b1111111111111111111111111111111111000000100010010101111010000010 3
b1111111111111111111111111111111111000000100010010101111010000010 7
b100000000 %
b100000000 /
b100000000 6
b1111111111111111111111111111111111000000100010010101111010000010 (
b1111111111111111111111111111111111000000100010010101111010000010 -
b1111111111111111111111111111111111000000100010010101111010000010 1
b100000000 )
b100000000 .
b1 +
#20000
b1111111111111111111111111111111110000100100001001101011000001011 $
b1111111111111111111111111111111110000100100001001101011000001011 3
b1111111111111111111111111111111110000100100001001101011000001011 7
b100000001 %
b100000001 /
b100000001 6
b1111111111111111111111111111111110000100100001001101011000001011 (
b1111111111111111111111111111111110000100100001001101011000001011 -
b1111111111111111111111111111111110000100100001001101011000001011 1
b100000001 )
b100000001 .
b10 +
#30000
1&
b1111111111111111111111111111111110110001111100000101011001100110 $
b1111111111111111111111111111111110110001111100000101011001100110 3
b1111111111111111111111111111111110110001111100000101011001100110 7
b100000010 %
b100000010 /
b100000010 6
b1111111111111111111111111111111110110001111100000101011001100110 (
b1111111111111111111111111111111110110001111100000101011001100110 -
b1111111111111111111111111111111110110001111100000101011001100110 1
b100000010 )
b100000010 .
b11 +
#40000
b110101110010111101100010001 $
b110101110010111101100010001 3
b110101110010111101100010001 7
b100000011 %
b100000011 /
b100000011 6
b110101110010111101100010001 (
b110101110010111101100010001 -
b110101110010111101100010001 1
b100000011 )
b100000011 .
b100 +
#50000
b1000110110111111001100110010010 $
b1000110110111111001100110010010 3
b1000110110111111001100110010010 7
b100000100 %
b100000100 /
b100000100 6
b1000110110111111001100110010010 (
b1000110110111111001100110010010 -
b1000110110111111001100110010010 1
b100000100 )
b100000100 .
b101 +
#60000
b1111111111111111111111111111111110110010110000101000010001101011 $
b1111111111111111111111111111111110110010110000101000010001101011 3
b1111111111111111111111111111111110110010110000101000010001101011 7
b100000101 %
b100000101 /
b100000101 6
b1111111111111111111111111111111110110010110000101000010001101011 (
b1111111111111111111111111111111110110010110000101000010001101011 -
b1111111111111111111111111111111110110010110000101000010001101011 1
b100000101 )
b100000101 .
b110 +
#70000
b1111111111111111111111111111111110001001001101110101001000011001 $
b1111111111111111111111111111111110001001001101110101001000011001 3
b1111111111111111111111111111111110001001001101110101001000011001 7
b100000110 %
b100000110 /
b100000110 6
b1111111111111111111111111111111110001001001101110101001000011001 (
b1111111111111111111111111111111110001001001101110101001000011001 -
b1111111111111111111111111111111110001001001101110101001000011001 1
b100000110 )
b100000110 .
b111 +
#80000
b111100111110001100001001 $
b111100111110001100001001 3
b111100111110001100001001 7
b100000111 %
b100000111 /
b100000111 6
b111100111110001100001001 (
b111100111110001100001001 -
b111100111110001100001001 1
b100000111 )
b100000111 .
b1000 +
#90000
b110110101111100110100010110 $
b110110101111100110100010110 3
b110110101111100110100010110 7
b100001000 %
b100001000 /
b100001000 6
b110110101111100110100010110 (
b110110101111100110100010110 -
b110110101111100110100010110 1
b100001000 )
b100001000 .
b1001 +
#100000
0&
b11111111 %
b11111111 /
b11111111 6
1#
0!
b11111111 )
b11111111 .
b101 '
b101 ,
b101 0
b101 4
b101 5
b0 +
#110000
b100000000 %
b100000000 /
b100000000 6
b100000000 )
b100000000 .
b1 +
#120000
b100000001 %
b100000001 /
b100000001 6
b100000001 )
b100000001 .
b10 +
#130000
1&
b100000010 %
b100000010 /
b100000010 6
b100000010 )
b100000010 .
b11 +
#140000
b100000011 %
b100000011 /
b100000011 6
b100000011 )
b100000011 .
b100 +
#150000
b100000100 %
b100000100 /
b100000100 6
b100000100 )
b100000100 .
b101 +
#160000
b100000101 %
b100000101 /
b100000101 6
b100000101 )
b100000101 .
b110 +
#170000
b100000110 %
b100000110 /
b100000110 6
b100000110 )
b100000110 .
b111 +
#180000
b100000111 %
b100000111 /
b100000111 6
b100000111 )
b100000111 .
b1000 +
#190000
b100001000 %
b100001000 /
b100001000 6
b100001000 )
b100001000 .
b1001 +
#200000
b1010 +
#220000
